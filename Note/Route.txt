The most basic Laravel routes accept a URI and a closure, providing a very simple and expressive(অভিব্যক্তিপূর্ণ) method of defining routes and behavior without complicated routing configuration files:

use Illuminate\Support\Facades\Route;

Route::get('/greeting', function () {
    return 'Hello World';
});

The Default Route Files:


1. All Laravel routes are defined in your route files, which are located in the routes directory.
2. These files are automatically loaded by your application's App\Providers\RouteServiceProvider.
3. The routes/web.php file defines routes that are for your web interface.
4. These routes are assigned the web middleware group, which provides features like session state and CSRF protection.
5. The routes in routes/api.php are stateless(শাসনহীন) and are assigned the api middleware group.

For most applications, you will begin by defining routes in your routes/web.php file. The routes defined in routes/web.php may be accessed by entering the defined route's URL in your browser. For example, you may access the following route by navigating to http://example.com/user in your browser:

use App\Http\Controllers\UserController;

Route::get('/user', [UserController::class, 'index']);

Routes defined in the routes/api.php file are nested within a route group by the RouteServiceProvider. Within this group, the /api URI prefix is automatically applied so you do not need to manually apply it to every route in the file. You may modify the prefix and other route group options by modifying your RouteServiceProvider class.

Available Router Methods:


The router allows you to register routes that respond to any HTTP verb:

Route::get($uri, $callback);
Route::post($uri, $callback);
Route::put($uri, $callback);
Route::patch($uri, $callback);
Route::delete($uri, $callback);
Route::options($uri, $callback);

Sometimes you may need to register a route that responds to multiple HTTP verbs. You may do so using the match method. Or, you may even register a route that responds to all HTTP verbs using the any method:

Route::match(['get', 'post'], '/', function () {

});

Route::any('/', function () {

});


Redirect Routes:


If you are defining a route that redirects to another URI, you may use the Route::redirect method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:

Route::redirect('/here', '/there');

By default, Route::redirect returns a 302 status code. You may customize the status code using the optional third parameter:

Route::redirect('/here', '/there', 301);

Or, you may use the Route::permanentRedirect method to return a 301 status code:

Route::permanentRedirect('/here', '/there');

*! Route with redirect

Route::get('/redirect', function () {
    return redirect('/about');
});

 Route::redirect('enter', 'go');
 Route::redirect('enter', 'go', 301);
 Route::permanentRedirect('enter', 'go');

***NOTE:***
When using route parameters in redirect routes, the following parameters are reserved by Laravel and cannot be used: destination and status.


*!View Routes:


If your route only needs to return a view, you may use the Route::view method. Like the redirect method, this method provides a simple shortcut so that you do not have to define a full route or controller. The view method accepts a URI as its first argument and a view name as its second argument. In addition, you may provide an array of data to pass to the view as an optional third argument:

Route::view('/welcome', 'welcome');

Route::view('/welcome', 'welcome', ['name' => 'Taylor']);


***NOTE:***
When using route parameters in view routes, the following parameters are reserved by Laravel and cannot be used: view, data, status, and headers.



*!The Route List:


The route:list Artisan command can easily provide an overview of all of the routes that are defined by your application:

php artisan route:list

By default, the route middleware that are assigned to each route will not be displayed in the route:list output; however, you can instruct Laravel to display the route middleware by adding the -v option to the command:

php artisan route:list -v

In addition, you may instruct Laravel to hide any routes that are defined by third-party packages by providing the --except-vendor option when executing the route:list command:

php artisan route:list --except-vendor


*!Required Parameters:


Sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:

 Route returns a parameter

Route::get('/about/{id}', function ($id) {
    return 'This is about page with id: ' . $id;
});

Route::get('user/{u_id}', function ($id) {
     return "User id is " . $id;
 });


*! Route returns a multiple parameters

Route::get('/about/{id}/{name}', function ($id, $name) {
    return 'This is about page with id: ' . $id . ' and name: ' . $name;
});


*!multiple routes multiple parameters

Route::get('/about/{id}/user/{name}/{age}', function ($id, $name, $age) {
    return 'This is about page with id: ' . $id . ' and name: ' . $name . ' and age: ' . $age;
});


Route::get('user/{u_id}/comment/{c_id}', function ($u_id, $c_id) {
    return "User id is " . $u_id . " and Comment id is " . $c_id;
});

*! Route returns optional parameters

Route::get('/optional/user/{id?}', function ($id = 'Enter your id') {
    return 'This is about page with id: ' . $id;
});

*! Route with regular expression

Route::get('/regular/{id}/user/{name}/{age}', function ($id, $name, $age) {
    return 'This is about page with id: ' . $id . ' and name: ' . $name . ' and age: ' . $age;
})->where(['id' => '[0-9]+', 'name' => '[A-Za-z]+', 'age' => '[0-9]+']);

Route::get('user/{name}/{u_id}', function ($name, $id) {
     return "User name is " . $name . " and id is " . $id;
 })->where(['name' => '[A-Za-z]+', 'u_id' => '[0-9]+']);

*! Route with helper method

Route::get('/helper/{id}/user/{name}/{age}', function ($id, $name, $age) {
    return 'This is about page with id: ' . $id . ' and name: ' . $name . ' and age: ' . $age;
})->whereAlpha('name')->whereNumber('age')->whereNumber('id');

 Route::get('user/{name}/{u_id}', function ($name, $id) {
    return "User name is " . $name . " and id is " . $id;
 })->whereNumber('id')->whereAlpha('name');

Route::get('/category/{category}', function ($category) {
     return 'This is about page with category: ' . $category;
 })->whereIn('category', ['movie', 'song', 'painting']);

 Route::get('student/{name?}', function ($name = null) {
     return "My name is " . $name;
 });
 Route::get('student/{name?}', function ($name = "enter your name") {
     return "My name is " . "{ " . $name . " }";
});

Route::get('student/{name?}/id/{u_id?}', function ($name = "enter your name", $id = "enter your id") {
     return "My name is "  . $name  . ". My id is " . $id;
 });


*!Named Routes:


Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name method onto the route definition:

Route::get('/user/profile', function () {
})->name('profile');

You may also specify route names for controller actions:

Route::get('/user/profile',[UserProfileController::class, 'show'])->name('profile');


***NOTE:***

Route names should always be unique.
